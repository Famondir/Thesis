}
plot_pr_double_curve <- function(df_temp2) {
pr_obj <- pr.curve(scores.class0 = df_temp2$confidence_score[df_temp2$match == 1],
scores.class1 = df_temp2$confidence_score[df_temp2$match == 0],
curve = TRUE)
# Precision-Recall Curve with ggplot2
pr_df <- tibble(
recall = pr_obj$curve[, 1],
precision = pr_obj$curve[, 2],
threshold = pr_obj$curve[, 3]
) %>%
mutate(f1 = 2 * precision * recall / (precision + recall))
pr_auc <- round(pr_obj$auc.integral, 3)
best_F1_row <- pr_obj$curve %>% as_tibble() %>% mutate(F1 = 2*V1*V2/(V1+V2)) %>%
slice_max(n = 1, F1)
best_F1 <- best_F1_row  %>% pull(F1)
best_threshold <- best_F1_row  %>% pull(V3)
g1 <- pr_df %>%
ggplot(aes(x = recall, y = precision)) +
geom_line(aes(color = threshold), size = 1.2) +
scale_color_viridis_c(option = "plasma", limits = c(0, 1)) +
labs(
title = str_c("Precision-Recall Curve (AUC = ", pr_auc, ")"),
subtitle = str_c(model_name_best_f1_aktiva, " with ", method__best_f1_aktiva),
x = "Recall",
y = "Precision"
) +
coord_cartesian(ylim = c(0,1)) +
theme(
legend.position = "bottom"
)
g2 <- pr_df %>%
ggplot(aes(x = recall, y = precision, color = f1)) +
geom_line(size = 1.2) +
scale_color_viridis_c(option = "viridis", limits = c(0, 1)) +
labs(
# title = "Precision-Recall Curve colored by F1 score",
x = "Recall",
y = NULL,
color = "F1 score"
) +
coord_cartesian(ylim = c(0,1))+
theme(
legend.position = "bottom"
)
g1 + g2 + plot_annotation(caption = paste0('Best F1 score ', best_F1, ' gets reached with threshold of value ', best_threshold))
}
model_rank <- 1
df_temp_mistral <- df_binary %>% calc_micro_f1(model_rank)
df_temp_mistral %>% plot_pr_double_curve()
calc_micro_f1 <- function(df, model_rank=1) {
l_temp <- list()
for (target in c('Aktiva', 'GuV', 'Passiva')) {
t <- "Aktiva"
df_filtered <- df %>% filter(
classification_type == t,
n_examples <= 3,
loop == 0) %>%
arrange(desc(f1_score))
model_name_best_f1_aktiva <- df_filtered[model_rank, "model"]
method__best_f1_aktiva <- df_filtered[model_rank, "method"]
df_filtered <- df %>%
filter(
classification_type == target,
model == model_name_best_f1_aktiva,
method == method__best_f1_aktiva,
loop == 0
) %>%
arrange(desc(f1_score))
df_temp <- df_filtered[1,"predictions"][[1]][[1]] %>% as_tibble()
df_flipped_score <- df_temp %>%
mutate(
# confidence_score = if_else(predicted_type == "no", 1-confidence_score, confidence_score),
target = target
)
l_temp[target] <- list(df_flipped_score)
}
return(bind_rows(l_temp))
}
plot_pr_double_curve <- function(df_temp2) {
pr_obj <- pr.curve(scores.class0 = df_temp2$confidence_score[df_temp2$match == 1],
scores.class1 = df_temp2$confidence_score[df_temp2$match == 0],
curve = TRUE)
# Precision-Recall Curve with ggplot2
pr_df <- tibble(
recall = pr_obj$curve[, 1],
precision = pr_obj$curve[, 2],
threshold = pr_obj$curve[, 3]
) %>%
mutate(f1 = 2 * precision * recall / (precision + recall))
pr_auc <- round(pr_obj$auc.integral, 3)
best_F1_row <- pr_obj$curve %>% as_tibble() %>% mutate(F1 = 2*V1*V2/(V1+V2)) %>%
slice_max(n = 1, F1)
best_F1 <- best_F1_row  %>% pull(F1)
best_threshold <- best_F1_row  %>% pull(V3)
g1 <- pr_df %>%
ggplot(aes(x = recall, y = precision)) +
geom_line(aes(color = threshold), size = 1.2) +
scale_color_viridis_c(option = "plasma", limits = c(0, 1)) +
labs(
title = str_c("Precision-Recall Curve (AUC = ", pr_auc, ")"),
subtitle = str_c(model_name_best_f1_aktiva, " with ", method__best_f1_aktiva),
x = "Recall",
y = "Precision"
) +
coord_cartesian(ylim = c(0,1)) +
theme(
legend.position = "bottom"
)
g2 <- pr_df %>%
ggplot(aes(x = recall, y = precision, color = f1)) +
geom_line(size = 1.2) +
scale_color_viridis_c(option = "viridis", limits = c(0, 1)) +
labs(
# title = "Precision-Recall Curve colored by F1 score",
x = "Recall",
y = NULL,
color = "F1 score"
) +
coord_cartesian(ylim = c(0,1))+
theme(
legend.position = "bottom"
)
g1 + g2 + plot_annotation(caption = paste0('Best F1 score ', round(best_F1,3) , ' gets reached with threshold of value ', round(best_threshold,3)))
}
model_rank <- 1
df_temp_mistral <- df_binary %>% calc_micro_f1(model_rank)
df_temp_mistral %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1(250)
df_temp_qwen %>% plot_pr_double_curve()
calc_micro_f1 <- function(df, model_rank=1) {
l_temp <- list()
for (target in c('Aktiva', 'GuV', 'Passiva')) {
t <- "Aktiva"
df_filtered <- df %>% filter(
classification_type == t,
n_examples <= 3,
loop == 0) %>%
arrange(desc(f1_score))
model_name_best_f1_aktiva <- df_filtered[model_rank, "model"]
method_best_f1_aktiva <- df_filtered[model_rank, "method"]
df_filtered <- df %>%
filter(
classification_type == target,
model == model_name_best_f1_aktiva,
method == method_best_f1_aktiva,
loop == 0
) %>%
arrange(desc(f1_score))
df_temp <- df_filtered[1,"predictions"][[1]][[1]] %>% as_tibble()
df_flipped_score <- df_temp %>%
mutate(
# confidence_score = if_else(predicted_type == "no", 1-confidence_score, confidence_score),
target = target
)
l_temp[target] <- list(df_flipped_score)
}
list(df = bind_rows(l_temp), model = model_name_best_f1_aktiva, method = method__best_f1_aktiva)
}
plot_pr_double_curve <- function(l) {
df_temp2 <- l$df
pr_obj <- pr.curve(scores.class0 = df_temp2$confidence_score[df_temp2$match == 1],
scores.class1 = df_temp2$confidence_score[df_temp2$match == 0],
curve = TRUE)
# Precision-Recall Curve with ggplot2
pr_df <- tibble(
recall = pr_obj$curve[, 1],
precision = pr_obj$curve[, 2],
threshold = pr_obj$curve[, 3]
) %>%
mutate(f1 = 2 * precision * recall / (precision + recall))
pr_auc <- round(pr_obj$auc.integral, 3)
best_F1_row <- pr_obj$curve %>% as_tibble() %>% mutate(F1 = 2*V1*V2/(V1+V2)) %>%
slice_max(n = 1, F1)
best_F1 <- best_F1_row  %>% pull(F1)
best_threshold <- best_F1_row  %>% pull(V3)
g1 <- pr_df %>%
ggplot(aes(x = recall, y = precision)) +
geom_line(aes(color = threshold), size = 1.2) +
scale_color_viridis_c(option = "plasma", limits = c(0, 1)) +
labs(
title = str_c("Precision-Recall Curve (AUC = ", pr_auc, ")"),
subtitle = str_c(l$model, " with ", l$method),
x = "Recall",
y = "Precision"
) +
coord_cartesian(ylim = c(0,1)) +
theme(
legend.position = "bottom"
)
g2 <- pr_df %>%
ggplot(aes(x = recall, y = precision, color = f1)) +
geom_line(size = 1.2) +
scale_color_viridis_c(option = "viridis", limits = c(0, 1)) +
labs(
# title = "Precision-Recall Curve colored by F1 score",
x = "Recall",
y = NULL,
color = "F1 score"
) +
coord_cartesian(ylim = c(0,1))+
theme(
legend.position = "bottom"
)
g1 + g2 + plot_annotation(caption = paste0('Best F1 score ', round(best_F1,3) , ' gets reached with threshold of value ', round(best_threshold,3)))
}
model_rank <- 1
df_temp_mistral <- df_binary %>% calc_micro_f1(model_rank)
df_temp_mistral %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1(250)
df_temp_qwen %>% plot_pr_double_curve()
calc_micro_f1 <- function(df, model_rank=1) {
l_temp <- list()
for (target in c('Aktiva', 'GuV', 'Passiva')) {
t <- "Aktiva"
df_filtered <- df %>% filter(
classification_type == t,
n_examples <= 3,
loop == 0) %>%
arrange(desc(f1_score))
model_name_best_f1_aktiva <- df_filtered[model_rank, "model"]
method_best_f1_aktiva <- df_filtered[model_rank, "method"]
df_filtered <- df %>%
filter(
classification_type == target,
model == model_name_best_f1_aktiva,
method == method_best_f1_aktiva,
loop == 0
) %>%
arrange(desc(f1_score))
df_temp <- df_filtered[1,"predictions"][[1]][[1]] %>% as_tibble()
df_flipped_score <- df_temp %>%
mutate(
# confidence_score = if_else(predicted_type == "no", 1-confidence_score, confidence_score),
target = target
)
l_temp[target] <- list(df_flipped_score)
}
list(df = bind_rows(l_temp), model = model_name_best_f1_aktiva, method = method_best_f1_aktiva)
}
plot_pr_double_curve <- function(l) {
df_temp2 <- l$df
pr_obj <- pr.curve(scores.class0 = df_temp2$confidence_score[df_temp2$match == 1],
scores.class1 = df_temp2$confidence_score[df_temp2$match == 0],
curve = TRUE)
# Precision-Recall Curve with ggplot2
pr_df <- tibble(
recall = pr_obj$curve[, 1],
precision = pr_obj$curve[, 2],
threshold = pr_obj$curve[, 3]
) %>%
mutate(f1 = 2 * precision * recall / (precision + recall))
pr_auc <- round(pr_obj$auc.integral, 3)
best_F1_row <- pr_obj$curve %>% as_tibble() %>% mutate(F1 = 2*V1*V2/(V1+V2)) %>%
slice_max(n = 1, F1)
best_F1 <- best_F1_row  %>% pull(F1)
best_threshold <- best_F1_row  %>% pull(V3)
g1 <- pr_df %>%
ggplot(aes(x = recall, y = precision)) +
geom_line(aes(color = threshold), size = 1.2) +
scale_color_viridis_c(option = "plasma", limits = c(0, 1)) +
labs(
title = str_c("Precision-Recall Curve (AUC = ", pr_auc, ")"),
subtitle = str_c(l$model, " with ", l$method),
x = "Recall",
y = "Precision"
) +
coord_cartesian(ylim = c(0,1)) +
theme(
legend.position = "bottom"
)
g2 <- pr_df %>%
ggplot(aes(x = recall, y = precision, color = f1)) +
geom_line(size = 1.2) +
scale_color_viridis_c(option = "viridis", limits = c(0, 1)) +
labs(
# title = "Precision-Recall Curve colored by F1 score",
x = "Recall",
y = NULL,
color = "F1 score"
) +
coord_cartesian(ylim = c(0,1))+
theme(
legend.position = "bottom"
)
g1 + g2 + plot_annotation(caption = paste0('Best F1 score ', round(best_F1,3) , ' gets reached with threshold of value ', round(best_threshold,3)))
}
model_rank <- 1
df_temp_mistral <- df_binary %>% calc_micro_f1(model_rank)
df_temp_mistral %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1(250)
df_temp_qwen %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1(229)
df_temp_qwen <- df_binary %>% calc_micro_f1(229)
df_temp_qwen %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1(250)
df_temp_qwen %>% plot_pr_double_curve()
df_binary %>% filter(n_examples < 5) %>% slice_max(n = 1, f1_score)
df_binary %>% ungroup() %>% filter(n_examples < 5) %>% slice_max(n = 1, f1_score)
temp_list <- readRDS("data_storage/page_identification_llm.rds")
df_binary <- temp_list$df_binary
df_multi <- temp_list$df_multi
method_families <- c("zero_shot", "law_context", "top_n_rag_examples", "n_random_examples", 'n_rag_examples')
method_familiy_colors <- c(
"zero_shot" = "#e41a1c",
"law_context" = "#377eb8",
"top_n_rag_examples" = "#4daf4a",
"n_random_examples" = "#984ea3",
'n_rag_examples' = "#ff7f00"
)
model_by_size_classification <- c('google_gemma-3-4b-it-0-9-1', 'google_gemma-3n-E4B-it-0-9-1', "google_gemma-3-12b-it-0-9-1",
"google_gemma-3-27b-it-0-9-1", "meta-llama_Llama-3.1-8B-Instruct",
"meta-llama_Llama-3.1-70B-Instruct", "meta-llama_Llama-3.3-70B-Instruct",
"meta-llama_Llama-4-Scout-17B-16E-Instruct", "meta-llama_Llama-4-Maverick-17B-128E-Instruct-FP8",
"mistralai_Ministral-8B-Instruct-2410", "mistralai_Mistral-Small-3.1-24B-Instruct-2503",
"mistralai_Mistral-Large-Instruct-2411", "Qwen_Qwen2.5-0.5B-Instruct",
"Qwen_Qwen2.5-1.5B-Instruct", "Qwen_Qwen2.5-3B-Instruct", "Qwen_Qwen2.5-7B-Instruct",
"Qwen_Qwen2.5-14B-Instruct", "Qwen_Qwen2.5-32B-Instruct", "Qwen_Qwen2.5-72B-Instruct",
"Qwen_Qwen3-8B", "Qwen_Qwen3-30B-A3B-Instruct-2507", "Qwen_Qwen3-32B", "Qwen_Qwen3-235B-A22B-Instruct-2507",
"tiiuae_Falcon3-10B-Instruct", "microsoft_phi-4"
)
df_binary <- df_binary %>% filter(model %in% model_by_size_classification) %>%
mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "law_context", 1, n_examples),
method_family = factor(method_family, levels = method_families)
) %>% ungroup() # %>%
# mutate(
#   model = str_replace(model, "_vllm", ""),
#   model_family = sub("_.*", "", model),
#   model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
#   model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
#   model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
#   model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family)
# )
binary_task <- list()
binary_task$n_models <- df_binary$model %>% unique() %>% length()
binary_task$n_model_families <- df_binary$model_family %>% unique() %>% length()
binary_task$n_method_families <- df_binary$method_family %>% unique() %>% length()
top_performer_binary <- df_binary %>%
filter(is.finite(f1_score), loop == 0) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
group_by(model_family, classification_type) %>%
slice_max(n = 1, f1_score) %>%
arrange(desc(f1_score)) %>%
select(model_family, model, classification_type, method_family, n_examples, f1_score, norm_runtime) %>%
mutate(
f1_score = round(f1_score, 2),
norm_runtime = round(norm_runtime, 0),
) %>% rename(
"runtime in s" = norm_runtime,
)
top_performer_binary_median <- top_performer_binary %>% group_by(classification_type) %>% summarise(median = median(f1_score))
top_performer_binary_median_guv <- top_performer_binary_median %>% filter(classification_type == "GuV") %>% pull(median)
top_performer_binary_median_aktiva <- top_performer_binary_median %>% filter(classification_type == "Aktiva") %>% pull(median)
top_performer_binary_median_passiva <- top_performer_binary_median %>% filter(classification_type == "Passiva") %>% pull(median)
df_multi <- df_multi %>% filter(model %in% model_by_size_classification) %>%
mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "law_context", 1, n_examples),
method_family = factor(method_family, levels = method_families)
) %>% ungroup() #%>%
# mutate(
#   model = str_replace(model, "_vllm", ""),
#   model_family = sub("_.*", "", model),
#   model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
#   model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
#   model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
#   model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family)
# )
df_binary %>% ungroup() %>% filter(n_examples < 5) %>% slice_max(n = 1, f1_score)
df_binary %>% ungroup() %>% filter(n_examples < 5) %>% slice_max(n = 1, f1_score) %>% .$model
df_binary %>% ungroup() %>% filter(n_examples < 5) %>% slice_max(n = 1, f1_score) %>% .$method
model_rank <- 1
df_temp_mistral <- df_binary %>% calc_micro_f1("mistralai_Ministral-8B-Instruct-2410", "3_rag_examples")
df_temp_mistral %>% plot_pr_double_curve()
df_binary %>% ungroup() %>% filter(n_examples < 5, str_detect(model, "Qwen")) %>% slice_max(n = 1, f1_score) %>% .$method
df_binary %>% ungroup() %>% filter(n_examples < 5, str_detect(model, "Qwen")) %>% slice_max(n = 1, f1_score) %>% .$model
df_binary %>% ungroup() %>% filter(n_examples < 5, str_detect(model, "Qwen2.5-1.5B")) %>% slice_max(n = 1, f1_score) %>% .$model
df_temp_qwen <- df_binary %>% calc_micro_f1("Qwen_Qwen2.5-1.5B-Instruct", "1_rag_examples")
df_temp_qwen %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1("Qwen_Qwen2.5-1.5B-Instruct", "1_rag_examples")
df_temp_qwen %>% plot_pr_double_curve()
calc_micro_f1 <- function(df, model, method) {
l_temp <- list()
for (target in c('Aktiva', 'GuV', 'Passiva')) {
# t <- "Aktiva"
# df_filtered <- df %>% filter(
#   classification_type == t,
#   n_examples <= 3,
#   loop == 0) %>%
#   arrange(desc(f1_score))
# model_name_best_f1_aktiva <- df_filtered[model_rank, "model"]
# method_best_f1_aktiva <- df_filtered[model_rank, "method"]
df_filtered <- df %>%
filter(
classification_type == target,
model == model,
method == method,
loop == 0
) %>%
arrange(desc(f1_score))
df_temp <- df_filtered[1,"predictions"][[1]][[1]] %>% as_tibble()
df_flipped_score <- df_temp %>%
mutate(
# confidence_score = if_else(predicted_type == "no", 1-confidence_score, confidence_score),
target = target
)
l_temp[target] <- list(df_flipped_score)
}
list(df = bind_rows(l_temp), model = model, method = method)
}
plot_pr_double_curve <- function(l) {
df_temp2 <- l$df
pr_obj <- pr.curve(scores.class0 = df_temp2$confidence_score[df_temp2$match == 1],
scores.class1 = df_temp2$confidence_score[df_temp2$match == 0],
curve = TRUE)
# Precision-Recall Curve with ggplot2
pr_df <- tibble(
recall = pr_obj$curve[, 1],
precision = pr_obj$curve[, 2],
threshold = pr_obj$curve[, 3]
) %>%
mutate(f1 = 2 * precision * recall / (precision + recall))
pr_auc <- round(pr_obj$auc.integral, 3)
best_F1_row <- pr_obj$curve %>% as_tibble() %>% mutate(F1 = 2*V1*V2/(V1+V2)) %>%
slice_max(n = 1, F1)
best_F1 <- best_F1_row  %>% pull(F1)
best_threshold <- best_F1_row  %>% pull(V3)
g1 <- pr_df %>%
ggplot(aes(x = recall, y = precision)) +
geom_line(aes(color = threshold), size = 1.2) +
scale_color_viridis_c(option = "plasma", limits = c(0, 1)) +
labs(
title = str_c("Precision-Recall Curve (AUC = ", pr_auc, ")"),
subtitle = str_c(l$model, " with ", l$method),
x = "Recall",
y = "Precision"
) +
coord_cartesian(ylim = c(0,1)) +
theme(
legend.position = "bottom"
)
g2 <- pr_df %>%
ggplot(aes(x = recall, y = precision, color = f1)) +
geom_line(size = 1.2) +
scale_color_viridis_c(option = "viridis", limits = c(0, 1)) +
labs(
# title = "Precision-Recall Curve colored by F1 score",
x = "Recall",
y = NULL,
color = "F1 score"
) +
coord_cartesian(ylim = c(0,1))+
theme(
legend.position = "bottom"
)
g1 + g2 + plot_annotation(caption = paste0('Best F1 score ', round(best_F1,3) , ' gets reached with threshold of value ', round(best_threshold,3)))
}
model_rank <- 1
df_temp_mistral <- df_binary %>% calc_micro_f1("mistralai_Ministral-8B-Instruct-2410", "3_rag_examples")
df_temp_mistral %>% plot_pr_double_curve()
model_rank <- 1
df_temp_mistral <- df_binary %>% calc_micro_f1("mistralai_Ministral-8B-Instruct-2410", "1_rag_examples")
df_temp_mistral %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1("Qwen_Qwen2.5-1.5B-Instruct", "1_rag_examples")
df_temp_qwen %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1("Qwen_Qwen2.5-0.5B-Instruct", "1_rag_examples")
df_temp_qwen %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1("Qwen_Qwen2.5-0.5B-Instruct", "zero_shot")
df_temp_qwen %>% plot_pr_double_curve()
df_temp_qwen$df
df_temp_qwen <- df_binary %>% calc_micro_f1("Qwen_Qwen2.5-1.5B-Instruct", "1_rag_examples")
df_temp_qwen %>% plot_pr_double_curve()
df_temp_qwen <- df_binary %>% calc_micro_f1("Qwen_Qwen2.5-1.5B-Instruct", "1_rag_examples")
df_temp_qwen %>% plot_pr_double_curve()
calc_micro_f1 <- function(df, model, method) {
l_temp <- list()
browser()
for (target in c('Aktiva', 'GuV', 'Passiva')) {
# t <- "Aktiva"
# df_filtered <- df %>% filter(
#   classification_type == t,
#   n_examples <= 3,
#   loop == 0) %>%
#   arrange(desc(f1_score))
# model_name_best_f1_aktiva <- df_filtered[model_rank, "model"]
# method_best_f1_aktiva <- df_filtered[model_rank, "method"]
df_filtered <- df %>%
filter(
classification_type == target,
model == model,
method == method,
loop == 0
) %>%
arrange(desc(f1_score))
df_temp <- df_filtered[1,"predictions"][[1]][[1]] %>% as_tibble()
df_flipped_score <- df_temp %>%
mutate(
# confidence_score = if_else(predicted_type == "no", 1-confidence_score, confidence_score),
target = target
)
l_temp[target] <- list(df_flipped_score)
}
list(df = bind_rows(l_temp), model = model, method = method)
}
model_rank <- 1
df_temp_mistral <- df_binary %>% calc_micro_f1("mistralai_Ministral-8B-Instruct-2410", "3_rag_examples")
df_filtered
df_temp_mistral %>% plot_pr_double_curve()
