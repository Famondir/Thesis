'google_gemma-3-4b-it', 'google_gemma-3n-E4B-it', "google_gemma-3-12b-it",
"google_gemma-3-27b-it", "meta-llama_Llama-3.1-8B-Instruct",
"meta-llama_Llama-3.1-70B-Instruct", "meta-llama_Llama-3.3-70B-Instruct",
"meta-llama_Llama-4-Scout-17B-16E-Instruct", "meta-llama_Llama-4-Maverick-17B-128E-Instruct-FP8",
"mistralai_Ministral-8B-Instruct-2410", "mistralai_Mistral-Small-3.1-24B-Instruct-2503",
"mistralai_Mistral-Large-Instruct-2411", "Qwen_Qwen2.5-0.5B-Instruct",
"Qwen_Qwen2.5-1.5B-Instruct", "Qwen_Qwen2.5-3B-Instruct", "Qwen_Qwen2.5-7B-Instruct",
"Qwen_Qwen2.5-14B-Instruct", "Qwen_Qwen2.5-32B-Instruct", "Qwen_Qwen2.5-72B-Instruct",
"Qwen_Qwen3-0.6B", "Qwen_Qwen3-1.7B", "Qwen_Qwen3-4B",
"Qwen_Qwen3-8B", "Qwen_Qwen3-14B", "Qwen_Qwen3-30B-A3B-Instruct-2507", "Qwen_Qwen3-32B", "Qwen_Qwen3-235B-A22B-Instruct-2507",
"gpt-4.1-nano", "gpt-4.1-mini", "gpt-4.1",
"tiiuae_Falcon3-10B-Instruct", "microsoft_phi-4"
)
method_order <- c("top_n_rag_examples", "n_random_examples", "top_n_rag_examples_out_of_sample", "static_example", "zero_shot" )
bind_rows(df, df_azure %>% filter(!str_detect(model, "azure"))) %>%
filter(str_detect(filepath, "Statistik"), method_family == "top_n_rag_examples") %>%
# select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, method_family)) %>%
filter(model %in% model_by_size) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
# pivot_longer(cols = -c(model, method, model_family)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = percentage_correct_total, fill = model_family)) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family + n_examples ~ out_of_company) +
theme(
legend.position = "bottom"
)
bind_rows(df, df_azure %>% filter(!str_detect(model, "azure"))) %>%
filter(out_of_company != TRUE | is.na(out_of_company), n_examples <= 3) %>%
# select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, method_family)) %>%
filter(model %in% model_by_size) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
# pivot_longer(cols = -c(model, method, model_family)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = percentage_correct_total, fill = model_family)) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family + n_examples ~ .)
norm_factors <- read_csv("../benchmark_jobs/page_identification/gpu_benchmark/runtime_factors.csv") %>%
mutate(
model_name = model_name %>% str_replace("/", "_")
) %>% filter(str_detect(filename, "multi"))
norm_factors_few_examples <- norm_factors %>% filter((str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml")))
norm_factors_many_examples <- norm_factors %>% filter(!(str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml"))) %>%
add_column(n_examples = list(c(7,9,11,13), c(5))) %>% unnest(n_examples)
norm_factors <- read_csv("../benchmark_jobs/page_identification/gpu_benchmark/runtime_factors.csv") %>%
mutate(
model_name = model_name %>% str_replace("/", "_")
) %>% filter(str_detect(filename, "multi"))
norm_factors_few_examples <- norm_factors %>% filter((str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml")))
norm_factors_many_examples <- norm_factors %>% filter(!(str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml"))) %>%
add_column(n_examples = list(c(7,9,11,13), c(5))) %>% unnest(n_examples)
df2 <- df %>% filter(n_examples <= 5) %>%
left_join(
norm_factors_few_examples %>% select(model_name, parameter_count),
by = c("model" = "model_name")
)
probit <- function(x) {
exp(x)/(exp(x)+1)
}
logit <- function(x) {
log((x+10^(-6))/(1-x+10^(-6)))
}
df %>% select(c(model, method, percentage_correct_numeric, percentage_correct_total, ignore_units, input_format)) %>%
pivot_longer(cols = -c(model, method, ignore_units, input_format)) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=ignore_units, y = value)) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name+input_format)
df2 %>% select(c(model, method, percentage_correct_numeric, percentage_correct_total, ignore_units, input_format)) %>%
pivot_longer(cols = -c(model, method, ignore_units, input_format)) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=ignore_units, y = value)) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name+input_format)
df  <-  read_csv("data_storage/synth_table_extraction_llm.rds")
norm_factors <- read_csv("../benchmark_jobs/page_identification/gpu_benchmark/runtime_factors.csv") %>%
mutate(
model_name = model_name %>% str_replace("/", "_")
) %>% filter(str_detect(filename, "multi"))
norm_factors_few_examples <- norm_factors %>% filter((str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml")))
norm_factors_many_examples <- norm_factors %>% filter(!(str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml"))) %>%
add_column(n_examples = list(c(7,9,11,13), c(5))) %>% unnest(n_examples)
df2 <- df %>% filter(n_examples <= 5) %>%
left_join(
norm_factors_few_examples %>% select(model_name, parameter_count),
by = c("model" = "model_name")
)
df2 %>% select(c(model, method, percentage_correct_numeric, percentage_correct_total, ignore_units, input_format)) %>%
pivot_longer(cols = -c(model, method, ignore_units, input_format)) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=ignore_units, y = value)) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name+input_format)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
ggplot() +
geom_boxplot(aes(x = 1, fill=ignore_units, y = percentage_correct_total), alpha = .3) +
geom_jitter(
data = . %>% filter(n_col_T_EUR > 0),
aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
height = 0, alpha = .5, width = 0.3
) +
scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~model+ignore_units)
#   data = . %>% filter(n_col_T_EUR > 0),
geom_boxplot(aes(x = 1, fill=ignore_units, y = percentage_correct_total), alpha = .3) +
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
ggplot() +
geom_boxplot(aes(x = 1, fill=ignore_units, y = percentage_correct_total), alpha = .3) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~model+ignore_units)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
ggplot() +
geom_boxplot(aes(x = 1, fill=ignore_units, y = percentage_correct_total), alpha = .3) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~model+ignore_units)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(ignore_units) %>%
ggplot() +
geom_boxplot(aes(x = 1, fill=model, y = percentage_correct_total), alpha = .3) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(ignore_units) %>%
ggplot() +
geom_boxplot(aes(x = 1, fill=model_family, y = percentage_correct_total), alpha = .3) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(ignore_units) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=model_family, y = percentage_correct_total), alpha = .3) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(ignore_units) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=model_family, y = percentage_correct_total), alpha = 1) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
source("~/Documents/data_science/Thesis/R/scripts/synth_table_extraction_llm_data_loading.R")
norm_factors <- read_csv("../benchmark_jobs/page_identification/gpu_benchmark/runtime_factors.csv") %>%
mutate(
model_name = model_name %>% str_replace("/", "_")
) %>% filter(str_detect(filename, "multi"))
norm_factors_few_examples <- norm_factors %>% filter((str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml")))
norm_factors_many_examples <- norm_factors %>% filter(!(str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml"))) %>%
add_column(n_examples = list(c(7,9,11,13), c(5))) %>% unnest(n_examples)
df2 <- df %>% filter(n_examples <= 5) %>%
left_join(
norm_factors_few_examples %>% select(model_name, parameter_count),
by = c("model" = "model_name")
)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(ignore_units) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=model_family, y = percentage_correct_total), alpha = 1) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
df2$model_family
df <- bind_rows(meta_list_llm) %>% select(!starts_with("changed_values")) %>%
filter(grammar_error != TRUE || is.na(grammar_error)) %>%
unnest_wider(`NA`, names_sep = "_") %>%
unnest_wider(`relative_numeric_difference`, names_sep = "_") %>%
unnest_wider(`levenstein_distance`, names_sep = "_") %>%
# rename_with(~ gsub("^NA_", "NA_", .x)) %>%  # Ensures prefix is NA_
mutate(
NA_total_truth = NA_true_positive + NA_false_negative,
NA_precision = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_positive), NA),
NA_recall = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_negative), NA),
NA_F1 = if_else((NA_precision + NA_recall) > 0, (2 * NA_precision * NA_recall)/(NA_precision + NA_recall), 0),
percentage_correct_numeric = correct_numeric/(correct_numeric + incorrect_numeric),
percentage_correct_total = (correct_numeric + NA_true_positive)/total_entries
) %>% mutate(
model = str_replace(model, "_vllm", ""),
model_family = sub("_.*", "", model),
model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family)
)
# Vectorized version for efficiency (avoids rowwise)
df <- df %>%
mutate(
n_columns = str_match(filepath, "(\\d)_columns")[,2],
header_span = str_match(filepath, "span_(False|True)")[,2] == "True",
thin = str_match(filepath, "thin_(False|True)")[,2] == "True",
year_as = str_match(filepath, "year_as_(.*)__unit")[,2],
unit_in_first_cell = str_match(filepath, "unit_in_first_cell_(False|True)")[,2] == "True",
unit_str = str_match(filepath, "unit_in_first_cell_(False|True)__(.*)__enumeration")[,3],
enumeration = str_match(filepath, "enumeration_(False|True)")[,2] == "True",
shuffle_rows = str_match(filepath, "shuffle_(False|True)")[,2] == "True",
text_around = str_match(filepath, "text_around_(False|True)")[,2] == "True",
max_line_length = str_match(filepath, "max_length_(\\d+)")[,2],
sum_same_line = str_match(filepath, "sum_in_same_row_(False|True)")[,2] == "True"
) %>%
left_join(unit_list, by = c("unit_str" = "unit")) %>%
mutate(
unit_multiplier = multiplier
) %>%
select(-multiplier) %>%
mutate(
n_columns = ordered(n_columns, c("3", "4", "5"))
) %>% mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "static_example", 1, n_examples),
many_line_breaks = if_else(max_line_length == 50, TRUE, FALSE)
)
df %>% write_csv("data_storage/synth_table_extraction_llm.rds")
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(
ignore_units,
input_format == "pdf"
) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=model_family, y = percentage_correct_total), alpha = 1) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(
ignore_units,
input_format == "md"
) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=model_family, y = percentage_correct_total), alpha = 1) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(
ignore_units,
input_format == "markdown"
) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=model_family, y = percentage_correct_total), alpha = 1) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(
ignore_units,
input_format == "html"
) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=model_family, y = percentage_correct_total), alpha = 1) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
df2 <- df %>% filter(n_examples <= 5) %>%
left_join(
norm_factors_few_examples %>% select(model_name, parameter_count),
by = c("model" = "model_name")
)
df2 %>%
# mutate(n_col_T_EUR = T_EUR_both + T_EUR) %>%
mutate(
model = factor(model, levels = model_by_size),
method_family = factor(method_family, levels = method_order),
n_examples = fct_rev(ordered(paste("n =", n_examples)))
) %>%
filter(
ignore_units,
input_format == "html"
) %>%
ggplot() +
geom_boxplot(aes(x = model, fill=model_family, y = percentage_correct_total), alpha = 1) +
# geom_jitter(
#   data = . %>% filter(n_col_T_EUR > 0),
#   aes(x = 1, group=ignore_units, color = factor(n_col_T_EUR), y = percentage_correct_total),
#   height = 0, alpha = .5, width = 0.3
# ) +
# scale_fill_manual(values = c("blue", "orange")) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_nested(method_family+n_examples~.)
library(shapviz)
library(h2o)
install.packages("h2o")
library(h2o)
h2o.init()
iris2 <- as.h2o(iris)
# Train-test split
set.seed(42)
split <- h2o.splitFrame(iris2, ratios = 0.7, seed = 42)
train <- split[[1]]
test <- split[[2]]
# Random forest
xvars <- colnames(iris)[-1]
fit_rf <- h2o.randomForest(x = xvars, y = "Sepal.Length", training_frame = train)
shp_rf <- shapviz(fit_rf, X_pred = as.data.frame(test))
sv_force(shp_rf, row_id = 1)
sv_dependence(shp_rf, xvars)
# Evaluate metrics on test set
pred_rf <- as.vector(h2o.predict(fit_rf, test))
true_rf <- as.vector(test$Sepal.Length)
rmse_rf <- sqrt(mean((pred_rf - true_rf)^2))
cat("Random Forest RMSE on test set:", rmse_rf, "\n")
# Linear model
fit_lm <- h2o.glm(x = xvars, y = "Sepal.Length", training_frame = train)
shp_lm <- shapviz(fit_lm, X_pred = as.data.frame(test), background_frame = train)
sv_force(shp_lm, row_id = 1)
sv_dependence(shp_lm, xvars)
# Evaluate metrics on test set
pred_lm <- as.vector(h2o.predict(fit_lm, test))
true_lm <- as.vector(test$Sepal.Length)
rmse_lm <- sqrt(mean((pred_lm - true_lm)^2))
cat("Linear Model RMSE on test set:", rmse_lm, "\n")
# Linear model
fit_lm <- h2o.glm(x = xvars, y = "Sepal.Length", training_frame = train, validation_frame = test)
fit_lm
colnames(iris)
fit_rf <- h2o.randomForest(x = xvars, y = "Sepal.Length", training_frame = train, validation_frame = test)
fit_rf
df_select
# Train H2O XGBoost model
fit_xgb_h2o <- h2o.xgboost(
x = xvars,
y = "Sepal.Length",
training_frame = train,
validation_frame = test,
ntrees = 500,
max_depth = 8,
learn_rate = 0.01,
seed = 42
)
# SHAP values with shapviz
shp_xgb <- shapviz(fit_xgb_h2o, X_pred = as.data.frame(test_h2o), background_frame = train_h2o)
# SHAP values with shapviz
shp_xgb <- shapviz(fit_xgb_h2o, X_pred = as.data.frame(test), background_frame = train)
sv_force(shp_xgb, row_id = 1)
sv_dependence(shp_xgb, xvars_h2o)
sv_dependence(shp_xgb, xvars)
iris2 <- as.h2o(iris)
# Train-test split
set.seed(42)
split <- h2o.splitFrame(iris2, ratios = 0.7, seed = 42)
train <- split[[1]]
test <- split[[2]]
# Random forest
xvars <- colnames(iris)[-1]
fit_rf <- h2o.randomForest(x = xvars, y = "Sepal.Length", training_frame = train, validation_frame = test)
shp_rf <- shapviz(fit_rf, X_pred = as.data.frame(test))
sv_force(shp_rf, row_id = 1)
sv_dependence(shp_rf, xvars)
sv_importance(shp_rf, show_numbers = TRUE)
sv_importance(shp_rf, kind = "beeswarm")
xfun::session_info('DT')
install.packages("highlight")
`?` <- function(x, y)
`?` <- function(x, y) {
eval(
sapply(
strsplit(
deparse(substitute(y)),
":"
),
function(e) parse(text = e)
)[[2 - as.logical(x)]])}
1 ? NA:FALSE
0 ? NA:FALSE
reticulate::py_last_error()
bookdown::publish_book(render = "local")
bookdown::publish_book(render = "none")
bookdown::publish_book(render = "local")
