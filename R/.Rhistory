json_data <- fromJSON(paste(file_content, collapse = "\n"))
name_split = (basename(file) %>% str_split("__"))[[1]]
method_index = which(str_starts((basename(file) %>% str_split("__"))[[1]], "ignore"))-1
# print(name_split)
results <-  json_data$results %>% as_tibble() %>% rowwise() %>%
mutate(
model = name_split[1],
method = name_split[method_index],
n_examples = str_match(method, "\\d+")[[1]],
out_of_company = if_else(str_detect(method, "rag"), str_detect(method, "out_of_company"), NA),
ignore_units = if_else((name_split[method_index+1] %>% str_split('_') %>% .[[1]] %>% .[3]) == "True", TRUE, FALSE),
method_family = str_replace(str_replace(method, '\\d+', 'n'), '_out_of_company', ''),
loop = as.numeric((basename(file) %>% str_match("loop_(.)(_queued)?\\.json"))[2]),
predictions = list(fromJSON(df_joined) %>% as_tibble()),
runtime = json_data$runtime
) %>% select(-df_joined)
# results$predictions <- predictions
meta_list_llm[[length(meta_list_llm) + 1]] <- results
}
df_synth <- bind_rows(meta_list_llm) %>% select(!starts_with("changed_values")) %>%
filter(grammar_error != TRUE || is.na(grammar_error)) %>%
unnest_wider(`NA`, names_sep = "_") %>%
unnest_wider(`relative_numeric_difference`, names_sep = "_") %>%
unnest_wider(`levenstein_distance`, names_sep = "_") %>%
# rename_with(~ gsub("^NA_", "NA_", .x)) %>%  # Ensures prefix is NA_
mutate(
NA_total_truth = NA_true_positive + NA_false_negative,
NA_precision = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_positive), NA),
NA_recall = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_negative), NA),
NA_F1 = if_else((NA_precision + NA_recall) > 0, (2 * NA_precision * NA_recall)/(NA_precision + NA_recall), 0),
percentage_correct_numeric = correct_numeric/(correct_numeric + incorrect_numeric),
percentage_correct_total = (correct_numeric + NA_true_positive)/total_entries
)
df_synth %>%
saveRDS("data_storage/real_table_extraction_azure.rds")
df_synth %>%
saveRDS("data_storage/real_table_extraction_synth.rds")
json_files_table_extraction_llm <- list.files(
"../benchmark_results/table_extraction/llm/final/real_tables/openai/",
pattern = "\\.json$",
full.names = TRUE
) %>%
.[!grepl("_test_", .)]
meta_list_llm <- list()
# Loop through each .json file
for (file in json_files_table_extraction_llm) {
# print(file)
# Read the JSON file
# Read the JSON file and replace NaN with NULL in the file content
file_content <- readLines(file, warn = FALSE)
file_content <- gsub("\\bNaN\\b", "null", file_content)
file_content <- gsub("\\bInfinity\\b", "null", file_content)
# Remove incomplete last JSON entry and close the list if file ends early
if (!grepl("\\]$", file_content[length(file_content)])) {
# Find the last complete JSON object (ends with "},")
last_complete <- max(grep('\\.pdf', file_content))
file_content <- c(file_content[1:last_complete], "}]")
}
json_data <- fromJSON(paste(file_content, collapse = "\n"))
name_split = (basename(file) %>% str_split("__"))[[1]]
method_index = which(str_starts((basename(file) %>% str_split("__"))[[1]], "loop"))-1
# print(name_split)
results <-  json_data %>% as_tibble() %>% rowwise() %>%
mutate(
model = name_split[1],
method = name_split[method_index],
n_examples = str_match(method, "\\d+")[[1]],
out_of_company = if_else(str_detect(method, "rag"), str_detect(method, "out_of_company"), NA),
method_family = str_replace(str_replace(method, '\\d+', 'n'), '_out_of_company', ''),
loop = as.numeric((basename(file) %>% str_match("loop_(.)(_queued)?\\.json"))[2]),
predictions = list(fromJSON(df_joined) %>% as_tibble()),
request_tokens = list(json_data$request_tokens)
) %>% select(-df_joined)
# results$predictions <- predictions
meta_list_llm[[length(meta_list_llm) + 1]] <- results
}
df_azure <- bind_rows(meta_list_llm) %>% select(!starts_with("changed_values")) %>%
filter(grammar_error != TRUE || is.na(grammar_error)) %>%
unnest_wider(`NA`, names_sep = "_") %>%
unnest_wider(`relative_numeric_difference`, names_sep = "_") %>%
unnest_wider(`levenstein_distance`, names_sep = "_") %>%
# rename_with(~ gsub("^NA_", "NA_", .x)) %>%  # Ensures prefix is NA_
mutate(
NA_total_truth = NA_true_positive + NA_false_negative,
NA_precision = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_positive), NA),
NA_recall = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_negative), NA),
NA_F1 = if_else((NA_precision + NA_recall) > 0, (2 * NA_precision * NA_recall)/(NA_precision + NA_recall), 0),
percentage_correct_numeric = correct_numeric/(correct_numeric + incorrect_numeric),
percentage_correct_total = (correct_numeric + NA_true_positive)/total_entries
) %>% mutate(
model_family = "chat-gpt"
) %>% mutate(
model = str_replace(model, "_vllm", "")
) %>% mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "static_example", 1, n_examples)
)
df_azure %>% filter(!str_detect(model, "azure")) %>%
saveRDS("data_storage/real_table_extraction_azure.rds")
json_files_table_extraction_llm <- list.files(
"../benchmark_results/table_extraction/llm/final/real_tables/",
pattern = "\\.json$",
full.names = TRUE
) %>%
.[!grepl("_test_", .)] %>%
.[grepl("synth", .)]
meta_list_llm <- list()
# Loop through each .json file
for (file in json_files_table_extraction_llm) {
# print(file)
# Read the JSON file
# Read the JSON file and replace NaN with NULL in the file content
file_content <- readLines(file, warn = FALSE)
file_content <- gsub("\\bNaN\\b", "null", file_content)
file_content <- gsub("\\bInfinity\\b", "null", file_content)
# Remove incomplete last JSON entry and close the list if file ends early
# if (!grepl("\\]$", file_content[length(file_content)])) {
#   # Find the last complete JSON object (ends with "},")
#   last_complete <- max(grep('\\.pdf', file_content))
#   file_content <- c(file_content[1:last_complete], "}]")
# }
json_data <- fromJSON(paste(file_content, collapse = "\n"))
name_split = (basename(file) %>% str_split("__"))[[1]]
method_index = which(str_starts((basename(file) %>% str_split("__"))[[1]], "ignore"))-1
# print(name_split)
results <-  json_data$results %>% as_tibble() %>% rowwise() %>%
mutate(
model = name_split[1],
method = name_split[method_index],
n_examples = str_match(method, "\\d+")[[1]],
out_of_company = if_else(str_detect(method, "rag"), str_detect(method, "out_of_company"), NA),
ignore_units = if_else((name_split[method_index+1] %>% str_split('_') %>% .[[1]] %>% .[3]) == "True", TRUE, FALSE),
method_family = str_replace(str_replace(method, '\\d+', 'n'), '_out_of_company', ''),
loop = as.numeric((basename(file) %>% str_match("loop_(.)(_queued)?\\.json"))[2]),
predictions = list(fromJSON(df_joined) %>% as_tibble()),
runtime = json_data$runtime,
request_tokens = list(json_data$request_tokens)
) %>% select(-df_joined)
# results$predictions <- predictions
meta_list_llm[[length(meta_list_llm) + 1]] <- results
}
df_synth <- bind_rows(meta_list_llm) %>% select(!starts_with("changed_values")) %>%
filter(grammar_error != TRUE || is.na(grammar_error)) %>%
unnest_wider(`NA`, names_sep = "_") %>%
unnest_wider(`relative_numeric_difference`, names_sep = "_") %>%
unnest_wider(`levenstein_distance`, names_sep = "_") %>%
# rename_with(~ gsub("^NA_", "NA_", .x)) %>%  # Ensures prefix is NA_
mutate(
NA_total_truth = NA_true_positive + NA_false_negative,
NA_precision = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_positive), NA),
NA_recall = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_negative), NA),
NA_F1 = if_else((NA_precision + NA_recall) > 0, (2 * NA_precision * NA_recall)/(NA_precision + NA_recall), 0),
percentage_correct_numeric = correct_numeric/(correct_numeric + incorrect_numeric),
percentage_correct_total = (correct_numeric + NA_true_positive)/total_entries
) %>% mutate(
model = str_replace(model, "_vllm", ""),
model_family = sub("_.*", "", model),
model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family)
) %>% mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "static_example", 1, n_examples)
)
df_synth %>%
saveRDS("data_storage/real_table_extraction_synth.rds")
bind_rows(df, df_azure %>% filter(!str_detect(model, "azure"))) %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
units_real_tables <- read_csv("../benchmark_truth/real_tables/table_characteristics.csv") %>% mutate(
filepath = paste0('../../benchmark_truth/real_tables/', company, '__', str_replace(filename, '.pdf', '.xlsx')),
T_EUR = (T_in_year + T_in_previous_year)>0
) %>% select(filepath, T_EUR)
df <- df %>% left_join(units_real_tables)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
units_real_tables
df
df$T_EUR
df$filepath
read_csv("../benchmark_truth/real_tables/table_characteristics.csv")
read_csv("../benchmark_truth/real_tables/table_characteristics.csv") %>% .$filepath
df$filepath
units_real_tables <- read_csv("../benchmark_truth/real_tables/table_characteristics.csv") %>% mutate(
filepath = paste0('/pvc/benchmark_truth/real_tables/', company, '__', str_replace(filename, '.pdf', '.xlsx')),
T_EUR = (T_in_year + T_in_previous_year)>0
) %>% select(filepath, T_EUR)
df <- df %>% left_join(units_real_tables)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, T_EUR)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, T_EUR)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family, T_EUR)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
df$filepath
units_real_tables <- read_csv("../benchmark_truth/real_tables/table_characteristics.csv") %>% mutate(
filepath = paste0('/pvc/benchmark_truth/real_tables/', company, '__', filename),
T_EUR = (T_in_year + T_in_previous_year)>0
) %>% select(filepath, T_EUR)
df <- df %>% left_join(units_real_tables)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, T_EUR)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family, T_EUR)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
units_real_tables$filepath
df$filepath
units_real_tables$filepath
units_real_tables
df %>% select(filepath)
units_real_tables <- read_csv("../benchmark_truth/real_tables/table_characteristics.csv") %>% mutate(
filepath = paste0('/pvc/benchmark_truth/real_tables/', company, '__', filename),
T_EUR = (T_in_year + T_in_previous_year)>0
) %>% select(filepath, T_EUR)
df <- df %>% left_join(units_real_tables)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, T_EUR)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family, T_EUR)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
units_real_tables$filepath[1]
df$filepath[1]
df <- readRDS("data_storage/real_table_extraction_llm.rds")
df <- df %>% left_join(units_real_tables)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, T_EUR)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family, T_EUR)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value, fill = model_family)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
library(jsonlite)
library(tidyverse)
#### Final ####
json_files_table_extraction_llm <- list.files(
"../benchmark_results/table_extraction/llm/final/real_tables/",
pattern = "\\.json$",
full.names = TRUE
) %>%
.[!grepl("_test_", .)] %>%
.[!grepl("synth", .)]
meta_list_llm <- list()
# Loop through each .json file
for (file in json_files_table_extraction_llm) {
# print(file)
# Read the JSON file
# Read the JSON file and replace NaN with NULL in the file content
file_content <- readLines(file, warn = FALSE)
file_content <- gsub("\\bNaN\\b", "null", file_content)
file_content <- gsub("\\bInfinity\\b", "null", file_content)
# Remove incomplete last JSON entry and close the list if file ends early
if (!grepl("\\]$", file_content[length(file_content)])) {
# Find the last complete JSON object (ends with "},")
last_complete <- max(grep('\\.pdf', file_content))
file_content <- c(file_content[1:last_complete], "}]")
}
json_data <- fromJSON(paste(file_content, collapse = "\n"))
name_split = (basename(file) %>% str_split("__"))[[1]]
method_index = which(str_starts((basename(file) %>% str_split("__"))[[1]], "loop"))-1
# print(name_split)
results <-  json_data %>% as_tibble() %>% rowwise() %>%
mutate(
model = name_split[1],
method = name_split[method_index],
n_examples = str_match(method, "\\d+")[[1]],
out_of_company = if_else(str_detect(method, "rag"), str_detect(method, "out_of_company"), NA),
method_family = str_replace(str_replace(method, '\\d+', 'n'), '_out_of_company', ''),
loop = as.numeric((basename(file) %>% str_match("loop_(.)(_queued)?\\.json"))[2]),
predictions = list(fromJSON(df_joined) %>% as_tibble()),
request_tokens = list(json_data$request_tokens)
) %>% select(-df_joined)
# results$predictions <- predictions
meta_list_llm[[length(meta_list_llm) + 1]] <- results
}
df <- bind_rows(meta_list_llm) %>% select(!starts_with("changed_values")) %>%
filter(grammar_error != TRUE || is.na(grammar_error)) %>%
unnest_wider(`NA`, names_sep = "_") %>%
unnest_wider(`relative_numeric_difference`, names_sep = "_") %>%
unnest_wider(`levenstein_distance`, names_sep = "_") %>%
# rename_with(~ gsub("^NA_", "NA_", .x)) %>%  # Ensures prefix is NA_
mutate(
NA_total_truth = NA_true_positive + NA_false_negative,
NA_precision = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_positive), NA),
NA_recall = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_negative), NA),
NA_F1 = if_else((NA_precision + NA_recall) > 0, (2 * NA_precision * NA_recall)/(NA_precision + NA_recall), 0),
percentage_correct_numeric = correct_numeric/(correct_numeric + incorrect_numeric),
percentage_correct_total = (correct_numeric + NA_true_positive)/total_entries
) %>% mutate(
model = str_replace(model, "_vllm", ""),
model_family = sub("_.*", "", model),
model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family)
) %>% mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "static_example", 1, n_examples)
) %>% mutate(
filepath = if_else(filepath == "../../benchmark_truth/real_tables/Tempelhof Projekt GmbH __TP_Geschaeftsbericht_2020.xlsx", "../../benchmark_truth/real_tables/Tempelhof Projekt GmbH__TP_Geschaeftsbericht_2020.xlsx", filepath)
)
df %>%
saveRDS("data_storage/real_table_extraction_llm.rds")
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, T_EUR)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family, T_EUR)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
df <- readRDS("data_storage/real_table_extraction_llm.rds")
units_real_tables <- read_csv("../benchmark_truth/real_tables/table_characteristics.csv") %>% mutate(
filepath = paste0('/pvc/benchmark_truth/real_tables/', company, '__', filename),
T_EUR = (T_in_year + T_in_previous_year)>0
) %>% select(filepath, T_EUR)
df <- df %>% left_join(units_real_tables)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, T_EUR)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family, T_EUR)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
library(jsonlite)
library(tidyverse)
#### Final ####
json_files_table_extraction_llm <- list.files(
"../benchmark_results/table_extraction/llm/final/real_tables/",
pattern = "\\.json$",
full.names = TRUE
) %>%
.[!grepl("_test_", .)] %>%
.[!grepl("synth", .)]
meta_list_llm <- list()
# Loop through each .json file
for (file in json_files_table_extraction_llm) {
# print(file)
# Read the JSON file
# Read the JSON file and replace NaN with NULL in the file content
file_content <- readLines(file, warn = FALSE)
file_content <- gsub("\\bNaN\\b", "null", file_content)
file_content <- gsub("\\bInfinity\\b", "null", file_content)
# Remove incomplete last JSON entry and close the list if file ends early
if (!grepl("\\]$", file_content[length(file_content)])) {
# Find the last complete JSON object (ends with "},")
last_complete <- max(grep('\\.pdf', file_content))
file_content <- c(file_content[1:last_complete], "}]")
}
json_data <- fromJSON(paste(file_content, collapse = "\n"))
name_split = (basename(file) %>% str_split("__"))[[1]]
method_index = which(str_starts((basename(file) %>% str_split("__"))[[1]], "loop"))-1
# print(name_split)
results <-  json_data %>% as_tibble() %>% rowwise() %>%
mutate(
model = name_split[1],
method = name_split[method_index],
n_examples = str_match(method, "\\d+")[[1]],
out_of_company = if_else(str_detect(method, "rag"), str_detect(method, "out_of_company"), NA),
method_family = str_replace(str_replace(method, '\\d+', 'n'), '_out_of_company', ''),
loop = as.numeric((basename(file) %>% str_match("loop_(.)(_queued)?\\.json"))[2]),
predictions = list(fromJSON(df_joined) %>% as_tibble()),
request_tokens = list(json_data$request_tokens)
) %>% select(-df_joined)
# results$predictions <- predictions
meta_list_llm[[length(meta_list_llm) + 1]] <- results
}
df <- bind_rows(meta_list_llm) %>% select(!starts_with("changed_values")) %>%
filter(grammar_error != TRUE || is.na(grammar_error)) %>%
unnest_wider(`NA`, names_sep = "_") %>%
unnest_wider(`relative_numeric_difference`, names_sep = "_") %>%
unnest_wider(`levenstein_distance`, names_sep = "_") %>%
# rename_with(~ gsub("^NA_", "NA_", .x)) %>%  # Ensures prefix is NA_
mutate(
NA_total_truth = NA_true_positive + NA_false_negative,
NA_precision = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_positive), NA),
NA_recall = if_else(NA_total_truth > 0, NA_true_positive/(NA_true_positive + NA_false_negative), NA),
NA_F1 = if_else((NA_precision + NA_recall) > 0, (2 * NA_precision * NA_recall)/(NA_precision + NA_recall), 0),
percentage_correct_numeric = correct_numeric/(correct_numeric + incorrect_numeric),
percentage_correct_total = (correct_numeric + NA_true_positive)/total_entries
) %>% mutate(
model = str_replace(model, "_vllm", ""),
model_family = sub("_.*", "", model),
model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family)
) %>% mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "static_example", 1, n_examples)
) %>% mutate(
filepath = if_else(filepath == "/pvc/benchmark_truth/real_tables/Tempelhof Projekt GmbH __TP_Geschaeftsbericht_2020.pdf", "/pvc/benchmark_truth/real_tables/Tempelhof Projekt GmbH__TP_Geschaeftsbericht_2020.pdf", filepath)
)
df %>%
saveRDS("data_storage/real_table_extraction_llm.rds")
df <- readRDS("data_storage/real_table_extraction_llm.rds")
df <- df %>% left_join(units_real_tables)
df %>%
select(c(model, method, percentage_correct_numeric, percentage_correct_total, model_family, T_EUR)) %>%
filter(model %in% c("mistralai_Ministral-8B-Instruct-2410")) %>%
mutate(
model = factor(model, levels = model_by_size)
) %>%
pivot_longer(cols = -c(model, method, model_family, T_EUR)) %>%
ggplot() +
geom_boxplot(aes(x = model, y = value)) +
geom_jitter(aes(x = model, y = value, color = T_EUR), alpha = .5) +
# facet_wrap(~name, ncol = 1) +
scale_x_discrete(guide = guide_axis(angle = 30)) +
facet_grid(method~name)
