scale_fill_discrete(guide="none") +
ylab("EUR") +
xlab("value status") +
facet_nested(~year) +
scale_y_log10(breaks = breaks, minor_breaks=minor_breaks)
ticks <- 2:9:2
ticks <- 2:9
2:9:2
2:9
seq_len(2,10,2)
se(2,10,2)
seq(2,10,2)
seq(2,8,q)
seq(2,8,2)
ticks <- seq(2,8,2)
ooms <- 10^seq(0, 10)
minor_breaks <- as.vector(ticks %o% ooms)
ticks <- 1
ooms <- 10^seq(0, 10)
breaks <- as.vector(ticks %o% ooms)
df_rot %>%
pivot_longer(year_truth:previous_year_result) %>%
mutate(
year = str_extract(name, ".*year"),
type = str_extract(name, "truth|result"),
) %>%
ggplot() +
# geom_violin(aes(x = name, y = log(value, 10))) +
geom_hline(yintercept = 30, linetype = "dotted") +
geom_violin(aes(x = type, y = value, fill = type)) +
# coord_cartesian(ylim = c(0, 10)) +
scale_fill_discrete(guide="none") +
ylab("EUR") +
xlab("value status") +
facet_nested(~year) +
scale_y_log10(breaks = breaks, minor_breaks=minor_breaks)
df_real_table_extraction %>%
filter(str_detect(model, "235B")) %>%
# filter(n_examples == 5, method_family == "top_n_rag_examples") %>%
group_by(model, method, same_company) %>%
reframe(
mean_numeric = mean(percentage_correct_numeric, na.rm = TRUE),
mean_F1 = mean(NA_F1, na.rm = TRUE),
mean_total = mean(percentage_correct_total, na.rm = TRUE)
) %>%
group_by(same_company) %>% slice_max(n = 1, mean_numeric, with_ties = FALSE) %>%
# select(model, method, mean_numeric, mean_F1, mean_total) %>%
ungroup() %>%
mutate_if(
is.numeric,
~ifelse(
. == max(., na.rm = TRUE),
paste0("**", format_floats(., 3), "**"),
format_floats(., 3)
)
) %>%
render_table(
alignment = "lllrrr",
caption = "Comparing the performance of Qwen3-235B for the best approaches depending on the circumstance if examples from the same company can be used for learning.",
ref = opts_current$get("label"),
dom = "t"
)
table_same_company <- df_real_table_extraction %>%
filter(str_detect(model, "235B")) %>%
# filter(n_examples == 5, method_family == "top_n_rag_examples") %>%
group_by(model, method, same_company) %>%
reframe(
mean_numeric = mean(percentage_correct_numeric, na.rm = TRUE),
mean_F1 = mean(NA_F1, na.rm = TRUE),
mean_total = mean(percentage_correct_total, na.rm = TRUE)
) %>%
group_by(same_company) %>% slice_max(n = 1, mean_numeric, with_ties = FALSE) %>%
# select(model, method, mean_numeric, mean_F1, mean_total) %>%
ungroup() %>%
mutate_if(
is.numeric,
~ifelse(
. == max(., na.rm = TRUE),
paste0("**", format_floats(., 3), "**"),
format_floats(., 3)
)
) %>% setNames(colnames(.) %>% str_replace("_", " ")) %>%
render_table(
alignment = "lllrrr",
caption = "Comparing the performance of Qwen3-235B for the best approaches depending on the circumstance if examples from the same company can be used for learning.",
ref = opts_current$get("label"),
dom = "t"
)
table_same_company <- df_real_table_extraction %>%
filter(str_detect(model, "235B")) %>%
# filter(n_examples == 5, method_family == "top_n_rag_examples") %>%
group_by(model, method, same_company) %>%
reframe(
mean_numeric = mean(percentage_correct_numeric, na.rm = TRUE),
mean_F1 = mean(NA_F1, na.rm = TRUE),
mean_total = mean(percentage_correct_total, na.rm = TRUE)
) %>%
group_by(same_company) %>% slice_max(n = 1, mean_numeric, with_ties = FALSE) %>%
# select(model, method, mean_numeric, mean_F1, mean_total) %>%
ungroup() %>%
mutate_if(
is.numeric,
~ifelse(
. == max(., na.rm = TRUE),
paste0("**", format_floats(., 3), "**"),
format_floats(., 3)
)
) %>% setNames(colnames(.) %>% str_replace("_", " ")) %>%
render_table(
alignment = "lllrrr",
caption = "Comparing the performance of Qwen3-235B for the best approaches depending on the circumstance if examples from the same company can be used for learning.",
ref = opts_current$get("label"),
dom = "t"
)
if(knitr::is_latex_output()) {
table_same_company <- table_same_company %>%
column_spec(1, width = "3.3cm")
}
table_same_company
norm_factors <- read_csv("../benchmark_jobs/page_identification/gpu_benchmark/runtime_factors_real_table_extraction.csv") %>%
mutate(
model_name = model_name %>% str_replace("/", "_")
)
norm_factors_few_examples <- norm_factors %>% filter((str_ends(filename, "binary.yaml") | str_ends(filename, "multi.yaml") | str_ends(filename, "vllm_batched.yaml")))
df_real_table_extraction %>% select(model_family, model) %>%
mutate(task = "real tables") %>%
bind_rows(
df_synth_table_extraction %>% select(model_family, model) %>%
mutate(task = "synth tables")
) %>%
bind_rows(
df_real_table_extraction_synth %>% select(model_family, model) %>%
mutate(task = "hybrid")
) %>%
bind_rows(
df_real_table_extraction_azure %>% select(model_family, model) %>%
mutate(task = "real tables")
) %>%
bind_rows(
df_binary %>% select(model_family, model) %>%
mutate(task = "binary") %>% mutate(
# model_family = sub("_.*", "", model),
model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family),
model = str_remove(model, "-0-9-1")
)
) %>%
bind_rows(
df_multi %>% select(model_family, model) %>%
mutate(task = "multi-class") %>% mutate(
# model_family = sub("_.*", "", model),
model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family),
model = str_remove(model, "-0-9-1")
)
) %>%
unique() %>%
mutate(used = "X") %>%
left_join(
norm_factors_few_examples %>%
mutate(model = gsub("^[^_]+_", "", model_name)) %>%
select(model, parameter_count),
) %>%
pivot_wider(names_from = task, values_from = used) %>%
write_csv("data_storage/model_usage_extraction.csv")
df_qwen235 <-  readRDS("data_storage/table_extraction_qwen3_235B_multiple_input_formats")
library(ggh4x)
table_characteristics <- read.csv("../benchmark_truth/real_tables_extended/table_characteristics_more_examples.csv") %>%
mutate(
filepath = paste0("/pvc/benchmark_truth/real_tables_extended/", company, "__", filename)
) %>% as_tibble()
df_qwen235 <- df_qwen235 %>% left_join(table_characteristics)
df_qwen235 %>% group_by(model, method, extractor, input_format) %>%
mutate(mean_total = mean(percentage_correct_total)) %>%
group_by(model, extractor, input_format, filepath) %>%
slice_max(n = 1, mean_total, with_ties = FALSE) %>%
# select(model, method, extractor, input_format, mean_total, filepath) %>%
ggplot() +
geom_boxplot(aes(x = company, y = percentage_correct_total)) +
facet_nested(extractor+input_format~.) +
scale_x_discrete(guide = guide_axis(angle = 30))
df_qwen235 %>% group_by(model, method, extractor, input_format) %>%
mutate(mean_total = mean(percentage_correct_total)) %>%
group_by(model, extractor, input_format, filepath) %>%
slice_max(n = 1, mean_total, with_ties = FALSE) %>%
# select(model, method, extractor, input_format, mean_total, filepath) %>%
ggplot() +
geom_boxplot(aes(x = company, y = percentage_correct_numeric)) +
facet_nested(extractor+input_format~.) +
scale_x_discrete(guide = guide_axis(angle = 30))
df_qwen235 %>% group_by(model, method, extractor, input_format) %>%
summarize(mean_total = mean(percentage_correct_total)) %>%
group_by(model, extractor, input_format) %>%
slice_max(n = 1, mean_total, with_ties = FALSE)
df_best <- df_qwen235 %>% filter(input_format == "text", extractor == "pdfium") %>%
group_by(method) %>%
mutate(mean_total = mean(percentage_correct_total), .before = 1) %>%
group_by(filepath) %>%
slice_max(n = 1, mean_total, with_ties = FALSE) %>%
ungroup()
df_best %>% mutate(across(T_in_year:multiple_this_years, ~as.character(.))) %>%
pivot_longer(T_in_year:multiple_this_years) %>%
group_by(name, value) %>%
mutate(mean_total = mean(percentage_correct_total)) %>%
ggplot() +
geom_point(aes(x = name, y = mean_total, color = value)) +
scale_x_discrete(guide = guide_axis(angle = 30))
df_temp <- df_best %>%
pivot_longer(NA_true_positive:NA_true_negative) %>%
mutate(
predicted = !str_detect(name, "negative"),
truth = !(name %in% c("NA_true_negative", "NA_false_positive"))
) %>%
filter(str_detect(name, "false"))
df_temp %>%
group_by(company) %>%
mutate(value_per_report = sum(value)/n()) %>%
ggplot() +
geom_tile(aes(y = truth, x = predicted, fill = value_per_report)) +
geom_text(
data = . %>% select(name, truth, predicted) %>% unique(),
aes(label = name, y = truth, x = predicted), color = "white"
) +
facet_wrap(~company)
df_temp %>%
ggplot() +
geom_tile(aes(y = truth, x = predicted, fill = ordered(value))) +
geom_text(
data = . %>% select(name, truth, predicted) %>% unique(),
aes(label = name, y = truth, x = predicted), color = "white"
) +
facet_wrap(~filepath)
df_best %>% mutate(across(T_in_year:multiple_this_years, ~as.character(.))) %>%
pivot_longer(T_in_year:multiple_this_years) %>%
group_by(name, value) %>%
mutate(mean_total = mean(percentage_correct_total)) %>%
ggplot() +
geom_point(aes(x = name, y = mean_total, color = value)) +
scale_x_discrete(guide = guide_axis(angle = 30))
df_best <- df_qwen235 %>% filter(input_format == "text", extractor == "pdfium") %>%
group_by(method) %>%
mutate(mean_total = mean(percentage_correct_total), .before = 1) %>%
group_by(filepath) %>%
slice_max(n = 1, mean_total, with_ties = FALSE) %>%
ungroup()
df_qwen235 %>% group_by(model, method, extractor, input_format) %>%
summarize(mean_total = mean(percentage_correct_total)) %>%
group_by(model, extractor, input_format) %>%
slice_max(n = 1, mean_total, with_ties = FALSE)
df_qwen235 <-  readRDS("data_storage/table_extraction_qwen3_235B_multiple_input_formats")
table_characteristics <- read.csv("../benchmark_truth/real_tables_extended/table_characteristics_more_examples.csv") %>%
mutate(
filepath = paste0("/pvc/benchmark_truth/real_tables_extended/", company, "__", filename)
) %>% as_tibble()
df_qwen235 <- df_qwen235 %>% left_join(table_characteristics)
df_qwen235 %>% group_by(model, method, extractor, input_format) %>%
summarize(mean_total = mean(percentage_correct_total)) %>%
group_by(model, extractor, input_format) %>%
slice_max(n = 1, mean_total, with_ties = FALSE) %>%
render_table()
knitr::include_graphics("images/HITL_flowchart_error_handling.png")
design = "
ABCD##X
EFGHI#Y
JKL####
MNOPQRS
TUVW###
"
df_binary %>% filter(classification_type == "Aktiva") %>%
filter(loop == 0) %>% filter(model %in% model_by_size_classification) %>%
mutate(norm_runtime = norm_runtime/60) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
# left_join(model_letters, by = "model") %>%
ggplot(aes(x = norm_runtime, y = f1_score)) +
# ggplot(aes(x = norm_runtime, y = recall)) +
# ggplot(aes(x = norm_runtime, y = precision)) +
geom_point(aes(color = method_family, shape = out_of_company), size = 7, alpha = .6) +
scale_shape(na.value = 15, guide = "legend") +
geom_text(aes(label = n_examples)) +
# facet_grid(classification_type~model) +
ggh4x::facet_manual(~factor(model, levels = model_by_size_classification), design = design) +
theme(legend.position = "bottom") +
guides(
color = guide_legend(nrow = 1),
shape = guide_legend(nrow = 1)
) +
labs(x = "normalized runtime in minutes") +
coord_cartesian(xlim = c(0, 60))
temp_list <- readRDS("data_storage/page_identification_llm.rds")
df_binary <- temp_list$df_binary %>% mutate(
# model_family = sub("_.*", "", model),
model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family),
model = str_remove(model, "-0-9-1")
)
df_multi <- temp_list$df_multi %>% mutate(
# model_family = sub("_.*", "", model),
model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family),
model = str_remove(model, "-0-9-1")
)
method_families <- c("zero_shot", "law_context", "top_n_rag_examples", "n_random_examples", 'n_rag_examples')
method_familiy_colors <- c(
"zero_shot" = "#e41a1c",
"law_context" = "#377eb8",
"top_n_rag_examples" = "#4daf4a",
"n_random_examples" = "#984ea3",
'n_rag_examples' = "#ff7f00"
)
model_by_size_classification <- c('google_gemma-3-4b-it', 'google_gemma-3n-E4B-it', "google_gemma-3-12b-it",
"google_gemma-3-27b-it", "meta-llama_Llama-3.1-8B-Instruct",
"meta-llama_Llama-3.1-70B-Instruct", "meta-llama_Llama-3.3-70B-Instruct",
"meta-llama_Llama-4-Scout-17B-16E-Instruct", "meta-llama_Llama-4-Maverick-17B-128E-Instruct-FP8",
"mistralai_Ministral-8B-Instruct-2410", "mistralai_Mistral-Small-3.1-24B-Instruct-2503",
"mistralai_Mistral-Large-Instruct-2411", "Qwen_Qwen2.5-0.5B-Instruct",
"Qwen_Qwen2.5-1.5B-Instruct", "Qwen_Qwen2.5-3B-Instruct", "Qwen_Qwen2.5-7B-Instruct",
"Qwen_Qwen2.5-14B-Instruct", "Qwen_Qwen2.5-32B-Instruct", "Qwen_Qwen2.5-72B-Instruct",
"Qwen_Qwen3-8B", "Qwen_Qwen3-30B-A3B-Instruct-2507", "Qwen_Qwen3-32B", "Qwen_Qwen3-235B-A22B-Instruct-2507",
"tiiuae_Falcon3-10B-Instruct", "microsoft_phi-4"
) %>% gsub("^[^_]+_", "", .)
df_binary <- df_binary %>%
mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "law_context", 1, n_examples),
method_family = factor(method_family, levels = method_families)
) %>% mutate(model = gsub("^[^_]+_", "", model)) %>%
filter(model %in% model_by_size_classification) %>%
ungroup() # %>%
# mutate(
#   model = str_replace(model, "_vllm", ""),
#   model_family = sub("_.*", "", model),
#   model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
#   model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
#   model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
#   model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family)
# )
binary_task <- list()
binary_task$n_models <- df_binary$model %>% unique() %>% length()
binary_task$n_model_families <- df_binary$model_family %>% unique() %>% length()
binary_task$n_method_families <- df_binary$method_family %>% unique() %>% length()
top_performer_binary <- df_binary %>%
filter(is.finite(f1_score), loop == 0) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
group_by(model_family, classification_type) %>%
slice_max(n = 1, f1_score) %>%
arrange(desc(f1_score)) %>%
select(model_family, model, classification_type, method_family, n_examples, f1_score, norm_runtime) %>%
mutate(
f1_score = round(f1_score, 2),
norm_runtime = round(norm_runtime, 0),
) %>% rename(
"runtime in s" = norm_runtime,
)
top_performer_binary_median <- top_performer_binary %>% group_by(classification_type) %>% summarise(median = median(f1_score))
top_performer_binary_median_guv <- top_performer_binary_median %>% filter(classification_type == "GuV") %>% pull(median)
top_performer_binary_median_aktiva <- top_performer_binary_median %>% filter(classification_type == "Aktiva") %>% pull(median)
top_performer_binary_median_passiva <- top_performer_binary_median %>% filter(classification_type == "Passiva") %>% pull(median)
df_multi <- df_multi %>%
mutate(
n_examples = as.numeric(n_examples),
n_examples = if_else(method_family == "zero_shot", 0, n_examples),
n_examples = if_else(method_family == "law_context", 1, n_examples),
method_family = factor(method_family, levels = method_families)
) %>% mutate(model = gsub("^[^_]+_", "", model)) %>%
filter(model %in% model_by_size_classification) %>%
ungroup() #%>%
# mutate(
#   model = str_replace(model, "_vllm", ""),
#   model_family = sub("_.*", "", model),
#   model_family = if_else(str_detect(model, "Qwen2"), "Qwen 2.5", model_family),
#   model_family = if_else(str_detect(model, "Qwen3"), "Qwen 3", model_family),
#   model_family = if_else(str_detect(model, "Llama-3"), "Llama-3", model_family),
#   model_family = if_else(str_detect(model, "Llama-4"), "Llama-4", model_family)
# )
top_performer_multu <- df_multi %>%
unnest(metrics) %>%
filter(metric_type %in% c("Aktiva", "Passiva", "GuV")) %>%
filter(is.finite(f1_score), loop == 0) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
group_by(model_family, metric_type) %>%
slice_max(n = 1, f1_score) %>%
arrange(desc(f1_score)) %>% # head(10) %>%
select(model_family, model, metric_type, method_family, n_examples, f1_score, norm_runtime) %>%
mutate(
f1_score = round(f1_score, 2),
norm_runtime = round(norm_runtime, 0),
) %>% rename(
"runtime in s" = norm_runtime,
)
design = "
ABCD##X
EFGHI#Y
JKL####
MNOPQRS
TUVW###
"
df_binary %>% filter(classification_type == "Aktiva") %>%
filter(loop == 0) %>% filter(model %in% model_by_size_classification) %>%
mutate(norm_runtime = norm_runtime/60) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
# left_join(model_letters, by = "model") %>%
ggplot(aes(x = norm_runtime, y = f1_score)) +
# ggplot(aes(x = norm_runtime, y = recall)) +
# ggplot(aes(x = norm_runtime, y = precision)) +
geom_point(aes(color = method_family, shape = out_of_company), size = 7, alpha = .6) +
scale_shape(na.value = 15, guide = "legend") +
geom_text(aes(label = n_examples)) +
# facet_grid(classification_type~model) +
ggh4x::facet_manual(~factor(model, levels = model_by_size_classification), design = design) +
theme(legend.position = "bottom") +
guides(
color = guide_legend(nrow = 1),
shape = guide_legend(nrow = 1)
) +
labs(x = "normalized runtime in minutes") +
coord_cartesian(xlim = c(0, 60))
df_binary %>% filter(classification_type == "Aktiva") %>%
filter(loop == 0) %>% filter(model %in% model_by_size_classification) %>%
mutate(norm_runtime = norm_runtime/60) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
# left_join(model_letters, by = "model") %>%
ggplot(aes(x = norm_runtime, y = f1_score)) +
# ggplot(aes(x = norm_runtime, y = recall)) +
# ggplot(aes(x = norm_runtime, y = precision)) +
geom_point(aes(color = method_family, shape = out_of_company), size = 7, alpha = .6) +
scale_shape(na.value = 15, guide = "legend") +
geom_text(aes(label = n_examples)) +
# facet_grid(classification_type~model) +
ggh4x::facet_manual(~factor(model, levels = model_by_size_classification), design = design) +
theme(legend.position = "bottom") +
guides(
color = guide_legend(nrow = 1),
shape = guide_legend(nrow = 1)
) +
labs(x = "normalized runtime in minutes")
design = "
ABCD##X
EFGHI#Y
JKL####
MNOPQRS
TUVW###
"
df_multi %>% unnest(metrics) %>% filter(metric_type == "micro_minorities") %>%
filter(loop == 0) %>% filter(model %in% model_by_size_classification) %>%
mutate(norm_runtime = norm_runtime/60) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
# left_join(model_letters, by = "model") %>%
ggplot(aes(x = norm_runtime, y = f1_score)) +
# ggplot(aes(x = norm_runtime, y = recall)) +
# ggplot(aes(x = norm_runtime, y = precision)) +
geom_point(aes(color = method_family, shape = out_of_company), size = 7, alpha = .6) +
scale_shape(na.value = 15, guide = "legend") +
geom_text(aes(label = n_examples)) +
# facet_grid(classification_type~model) +
ggh4x::facet_manual(~factor(model, levels = model_by_size_classification), design = design) +
theme(legend.position = "bottom") +
guides(
color = guide_legend(nrow = 1),
shape = guide_legend(nrow = 1)
) +
labs(x = "normalized runtime in minutes") +
coord_cartesian(xlim = c(0, 60))
df_binary %>% filter(classification_type == "Aktiva") %>%
filter(loop == 0) %>% filter(model %in% model_by_size_classification) %>%
mutate(norm_runtime = norm_runtime/60) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
# left_join(model_letters, by = "model") %>%
ggplot(aes(x = norm_runtime, y = f1_score)) +
# ggplot(aes(x = norm_runtime, y = recall)) +
# ggplot(aes(x = norm_runtime, y = precision)) +
geom_point(aes(color = method_family, shape = out_of_company), size = 7, alpha = .6) +
scale_shape(na.value = 15, guide = "legend") +
geom_text(aes(label = n_examples)) +
# facet_grid(classification_type~model) +
ggh4x::facet_manual(~factor(model, levels = model_by_size_classification), design = design) +
theme(legend.position = "bottom") +
guides(
color = guide_legend(nrow = 1),
shape = guide_legend(nrow = 1)
) +
labs(x = "normalized runtime in minutes") +
coords_carthesian(ylim = c(0,1))
df_binary %>% filter(classification_type == "Aktiva") %>%
filter(loop == 0) %>% filter(model %in% model_by_size_classification) %>%
mutate(norm_runtime = norm_runtime/60) %>%
filter(n_examples <= 3 | is.na(n_examples)) %>%
# left_join(model_letters, by = "model") %>%
ggplot(aes(x = norm_runtime, y = f1_score)) +
# ggplot(aes(x = norm_runtime, y = recall)) +
# ggplot(aes(x = norm_runtime, y = precision)) +
geom_point(aes(color = method_family, shape = out_of_company), size = 7, alpha = .6) +
scale_shape(na.value = 15, guide = "legend") +
geom_text(aes(label = n_examples)) +
# facet_grid(classification_type~model) +
ggh4x::facet_manual(~factor(model, levels = model_by_size_classification), design = design) +
theme(legend.position = "bottom") +
guides(
color = guide_legend(nrow = 1),
shape = guide_legend(nrow = 1)
) +
labs(x = "normalized runtime in minutes") +
coord_carthesian(ylim = c(0,1))
knitr::include_graphics("images/unified_flowchart.png")
