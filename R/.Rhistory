# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(list(df_to_display, df_bold, df_red), function(text, bold, color) {cell_spec(if_else(is.na(text), "", text), bold = bold, color = if_else(is.na(color), NULL, "darkred"))}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
# py$df_two_header_lines[[1]] %>%
#   setNames(colnames(.) %>% str_remove(".\\d")) %>%
#   kbl() %>%
#   kable_classic() %>%
#   add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
#   column_spec(1, border_right=T) %>%
#   column_spec(3, border_right=T) %>%
#   column_spec(5, border_right=T) %>%
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(list(df_to_display, df_bold, df_red), function(text, bold, color) {cell_spec(if_else(is.na(text), "", text), bold = bold, color = if_else(is.na(color), TRUE, "darkred"))}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
# py$df_two_header_lines[[1]] %>%
#   setNames(colnames(.) %>% str_remove(".\\d")) %>%
#   kbl() %>%
#   kable_classic() %>%
#   add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
#   column_spec(1, border_right=T) %>%
#   column_spec(3, border_right=T) %>%
#   column_spec(5, border_right=T) %>%
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(list(df_to_display, df_bold, df_red), function(text, bold, color) {cell_spec(if_else(is.na(text), "", text), bold = bold, color = if_else(is.na(color), NA, "darkred"))}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
# py$df_two_header_lines[[1]] %>%
#   setNames(colnames(.) %>% str_remove(".\\d")) %>%
#   kbl() %>%
#   kable_classic() %>%
#   add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
#   column_spec(1, border_right=T) %>%
#   column_spec(3, border_right=T) %>%
#   column_spec(5, border_right=T) %>%
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(
list(df_to_display, df_bold, df_red),
function(text, bold, color) {
if_else(
is.na(color),
cell_spec(if_else(is.na(text), "", text), bold = bold, color = "darkred"),
cell_spec(if_else(is.na(text), "", text), bold = bold)
)}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
df_to_display %>%
kbl(escape = F) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
column_spec(1, border_right=T) %>%
column_spec(3, border_right=T) %>%
column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
# py$df_two_header_lines[[1]] %>%
#   setNames(colnames(.) %>% str_remove(".\\d")) %>%
#   kbl() %>%
#   kable_classic() %>%
#   add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
#   column_spec(1, border_right=T) %>%
#   column_spec(3, border_right=T) %>%
#   column_spec(5, border_right=T) %>%
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(
list(df_to_display, df_bold, df_red),
function(text, bold, color) {
if_else(
!is.na(color),
cell_spec(if_else(is.na(text), "", text), bold = bold, color = "darkred"),
cell_spec(if_else(is.na(text), "", text), bold = bold)
)}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
df_to_display %>%
kbl(escape = F) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
column_spec(1, border_right=T) %>%
column_spec(3, border_right=T) %>%
column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
# py$df_two_header_lines[[1]] %>%
#   setNames(colnames(.) %>% str_remove(".\\d")) %>%
#   kbl() %>%
#   kable_classic() %>%
#   add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
#   column_spec(1, border_right=T) %>%
#   column_spec(3, border_right=T) %>%
#   column_spec(5, border_right=T) %>%
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(
list(df_to_display, df_bold, df_red),
function(text, bold, color) {
if_else(
!is.na(color),
cell_spec(if_else(is.na(text), "", text), bold = bold, color = "darkred"),
cell_spec(if_else(is.na(text), "", text), bold = bold)
)}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
df_to_display %>%
kbl(escape = F) %>%
kable_paper() %>%
add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
column_spec(1, border_right=T) %>%
column_spec(3, border_right=T) %>%
column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
# py$df_two_header_lines[[1]] %>%
#   setNames(colnames(.) %>% str_remove(".\\d")) %>%
#   kbl() %>%
#   kable_classic() %>%
#   add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
#   column_spec(1, border_right=T) %>%
#   column_spec(3, border_right=T) %>%
#   column_spec(5, border_right=T) %>%
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(
list(df_to_display, df_bold, df_red),
function(text, bold, color) {
if_else(
!is.na(color),
cell_spec(if_else(is.na(text), "", text), bold = bold, color = "darkred"),
cell_spec(if_else(is.na(text), "", text), bold = bold)
)}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
df_to_display %>%
kbl(escape = F) %>%
kable_paper() %>%
add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
# column_spec(1, border_right=T) %>%
# column_spec(3, border_right=T) %>%
# column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
# py$df_two_header_lines[[1]] %>%
#   setNames(colnames(.) %>% str_remove(".\\d")) %>%
#   kbl() %>%
#   kable_classic() %>%
#   add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
#   column_spec(1, border_right=T) %>%
#   column_spec(3, border_right=T) %>%
#   column_spec(5, border_right=T) %>%
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(
list(df_to_display, df_bold, df_red),
function(text, bold, color) {
if_else(
!is.na(color),
cell_spec(if_else(is.na(text), "", text), bold = bold, color = "darkred"),
cell_spec(if_else(is.na(text), "", text), bold = bold)
)}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
df_to_display %>%
kbl(escape = F, booktabs = T) %>%
kable_paper() %>%
add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
# column_spec(1, border_right=T) %>%
# column_spec(3, border_right=T) %>%
# column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
# py$df_two_header_lines[[1]] %>%
#   setNames(colnames(.) %>% str_remove(".\\d")) %>%
#   kbl() %>%
#   kable_classic() %>%
#   add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
#   column_spec(1, border_right=T) %>%
#   column_spec(3, border_right=T) %>%
#   column_spec(5, border_right=T) %>%
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(
list(df_to_display, df_bold, df_red),
function(text, bold, color) {
if_else(
!is.na(color),
cell_spec(if_else(is.na(text), "", text), bold = bold, color = "darkred"),
cell_spec(if_else(is.na(text), "", text), bold = bold)
)}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
df_to_display %>%
kbl(escape = F, booktabs = T) %>%
kable_paper() %>%
add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
column_spec(1, border_right=T) %>%
column_spec(3, border_right=T) %>%
column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
results <- readRDS("data_storage/h2o/real_table_extraction_regex_h2o_results_sample_50000_shap_2000_NA_recoded_extended.rds")
shap <- results$NA_F1$shap_values$rf
shap$X <- shap$X %>% mutate(across(everything(), convert_binary)) %>% mutate(
n_columns = factor(as.numeric(n_columns)+1)
)
df_shap <- tibble(
y = (shap$S %>% rowSums())+shap$baseline
) %>% bind_cols(shap$X) %>% rowid_to_column() %>%
arrange(y)
idx_lowest <- df_shap %>% pull(rowid)
shap %>% sv_dependence("vis_seperated_cols")
shap %>% sv_dependence("vis_seperated_cols", "sum_same_line")
shap %>% sv_dependence("n_columns", color_var = "sum_same_line")
shap %>% sv_dependence("vis_seperated_cols", "sum_same_line")
shap %>% sv_dependence("sum_same_line")
shap %>% sv_dependence("T_in_previous_year")
shap %>% sv_dependence("vis_seperated_cols")
shap %>% sv_dependence("sum_same_line")
shap %>% sv_dependence("vis_seperated_cols")
shap %>% sv_dependence("T_in_previous_year")
shap %>% sv_dependence("sum_same_line")
shap %>% sv_dependence("T_in_previous_year")
shap %>% sv_dependence("vis_seperated_cols")
shap %>% sv_dependence("T_in_previous_year")
shap %>% sv_dependence("sum_same_line")
shap %>% sv_dependence("sum_same_line", "T_in_previous_year")
results <- readRDS("data_storage/h2o/synth_table_extraction_regex_h2o_results_sample_50000_shap_2000_NA_recoded.rds")
shap <- results$perc_numeric$shap_values$rf
df_shap <- tibble(
y = (shap$S %>% rowSums())+shap$baseline
) %>% bind_cols(shap$X) %>% rowid_to_column() %>%
arrange(y)
idx_lowest <- df_shap %>% pull(rowid)
shap %>% sv_importance(show_numbers = TRUE)
shap <- results$NA_F1$shap_values$rf
df_shap <- tibble(
y = (shap$S %>% rowSums())+shap$baseline
) %>% bind_cols(shap$X) %>% rowid_to_column() %>%
arrange(y)
idx_lowest <- df_shap %>% pull(rowid)
shap %>% sv_importance(show_numbers = TRUE)
results <- readRDS("data_storage/h2o/synth_table_extraction_regex_h2o_results_sample_50000_shap_2000_NA_recoded.rds")
shap <- results$perc_numeric$shap_values$rf
df_shap <- tibble(
y = (shap$S %>% rowSums())+shap$baseline
) %>% bind_cols(shap$X) %>% rowid_to_column() %>%
arrange(y)
idx_lowest <- df_shap %>% pull(rowid)
shap %>% sv_dependence("extraction_backend")
shap %>% sv_dependence(colnames(.$X), "extraction_backend")
reticulate::repl_python()
library(xml2)
library(rvest)
library(dplyr)
library(purrr)
library(tibble)
html_table <- xml2::read_html("../benchmark_results/table_extraction/hypotheses_and_results_real_table_extraction_synth_context_llm.html") %>%
xml2::xml_find_first("//table")
# Get all rows
rows <- xml_find_all(html_table, ".//tr")
# Skip first two rows (header)
data_rows <- rows[-c(1,2)]
# Helper to extract info from a cell
extract_cell_info <- function(cell) {
# Check for bold (either <b> or <strong> or style)
is_bold <- length(xml_find_all(cell, ".//b | .//strong")) > 0 ||
grepl("font-weight:\\s*bold", xml_attr(cell, "style") %||% "", ignore.case = TRUE)
# Get text color from style attribute
style <- xml_attr(cell, "style") %||% ""
color <- NA_character_
# Try to get color from <font> tag first
font_tag <- xml_find_first(cell, ".//font[@color]")
if (!is.na(font_tag) && length(font_tag) > 0) {
color <- xml_attr(font_tag, "color")
} else if (grepl("color:", style)) {
color <- sub(".*color:\\s*([^;]+);?.*", "\\1", style)
}
color <- trimws(color)
# Get text content
text <- xml_text(cell, trim = TRUE)
tibble(text = text, bold = is_bold, color = color)
}
# Build matrix/list of cell info
cell_info_list <- map(data_rows, function(row) {
cells <- xml_find_all(row, ".//td|.//th")
map_dfr(cells, extract_cell_info)
})
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(
list(df_to_display, df_bold, df_red),
function(text, bold, color) {
if_else(
!is.na(color),
cell_spec(if_else(is.na(text), "", text), bold = bold, color = "darkred"),
cell_spec(if_else(is.na(text), "", text), bold = bold)
)}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
df_to_display %>%
kbl(escape = F, booktabs = T, caption = "Comparing the formulated hypotheses and the found results for the table extraction on real Aktiva tables with the synthetic in-context learning approach.") %>%
kable_paper() %>%
add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
column_spec(1, border_right=T) %>%
column_spec(3, border_right=T) %>%
column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
reticulate::repl_python()
library(xml2)
library(rvest)
library(dplyr)
library(purrr)
library(tibble)
html_table <- xml2::read_html("../benchmark_results/table_extraction/hypotheses_and_results_real_table_extraction_synth_context_llm.html") %>%
xml2::xml_find_first("//table")
# Get all rows
rows <- xml_find_all(html_table, ".//tr")
# Skip first two rows (header)
data_rows <- rows[-c(1,2)]
# Helper to extract info from a cell
extract_cell_info <- function(cell) {
# Check for bold (either <b> or <strong> or style)
is_bold <- length(xml_find_all(cell, ".//b | .//strong")) > 0 ||
grepl("font-weight:\\s*bold", xml_attr(cell, "style") %||% "", ignore.case = TRUE)
# Get text color from style attribute
style <- xml_attr(cell, "style") %||% ""
color <- NA_character_
# Try to get color from <font> tag first
font_tag <- xml_find_first(cell, ".//font[@color]")
if (!is.na(font_tag) && length(font_tag) > 0) {
color <- xml_attr(font_tag, "color")
} else if (grepl("color:", style)) {
color <- sub(".*color:\\s*([^;]+);?.*", "\\1", style)
}
color <- trimws(color)
# Get text content
text <- xml_text(cell, trim = TRUE)
tibble(text = text, bold = is_bold, color = color)
}
# Build matrix/list of cell info
cell_info_list <- map(data_rows, function(row) {
cells <- xml_find_all(row, ".//td|.//th")
map_dfr(cells, extract_cell_info)
})
# Find which cells are bold (excluding the first column)
bold_matrix <- sapply(cell_info_list, function(row) row$bold) %>% t()
# Set first column to FALSE (never bold)
if (is.matrix(bold_matrix)) {
bold_matrix[, 1] <- FALSE
} else {
# If only one row, ensure it's a matrix
bold_matrix[1] <- FALSE
}
df_bold <- bold_matrix %>% as.data.frame()
df_red <- sapply(cell_info_list, function(row) row$color) %>% t() %>%
as.data.frame()
df_to_display <- py$df_two_header_lines[[1]]
df_to_display <- pmap(
list(df_to_display, df_bold, df_red),
function(text, bold, color) {
if_else(
!is.na(color),
cell_spec(if_else(is.na(text), "", text), bold = bold, color = "darkred"),
cell_spec(if_else(is.na(text), "", text), bold = bold)
)}) %>%
as_tibble() %>% setNames(colnames(.) %>% str_remove(".\\d"))
df_to_display %>%
kbl(escape = F, booktabs = T, caption = "Comparing the formulated hypotheses and the found results for the table extraction on real Aktiva tables with the synthetic in-context learning approach.") %>%
kable_paper() %>%
add_header_above(c(" " = 1, "F1" = 2, "% correct numeric" = 2, "binomial" = 2)) %>%
column_spec(1, border_right=T) %>%
column_spec(3, border_right=T) %>%
column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
df_to_display %>%
kbl(escape = F, booktabs = T, caption = "Comparing the formulated hypotheses and the found results for the table extraction on real Aktiva tables with the synthetic in-context learning approach.") %>%
kable_paper() %>%
add_header_above(c(
" " = 1, "F1" = 2, "% correct numeric" = 2,
"binomial" = 2, "confidence" = 2
)) %>%
column_spec(1, border_right=T) %>%
column_spec(3, border_right=T) %>%
column_spec(5, border_right=T) %>%
row_spec(
which(str_detect(py$df_two_header_lines[[1]][[1]], "\\*$")),
color = "gray"
)
reticulate::repl_python()
